{"pageProps":{"slug":"nextjs-project-render","mdxSource":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    hr: \"hr\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Next.js 렌더링 방식 정리\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"1. SSR (Server-Side Rendering)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"설명: 매 요청마다 서버에서 HTML을 생성하여 클라이언트에 전달\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"장점:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"항상 최신 데이터를 제공\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"SEO에 유리\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"단점:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"매 요청마다 렌더링되므로 성능에 부담\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"사용 예시:\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export async function getServerSideProps(context) {\\n  const res = await fetch('https://api.example.com/data');\\n  const data = await res.json();\\n  return { props: { data } };\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"2. SSG (Static Site Generation)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"설명: 빌드 시점에 HTML을 생성하여 정적으로 제공\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"장점:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"빠른 응답 속도 (CDN 캐싱 가능)\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"서버 부하 없음\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"단점:\"\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"실시간 데이터 반영 어려움\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"사용 예시:\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export async function getStaticProps() {\\n  const res = await fetch('https://api.example.com/data');\\n  const data = await res.json();\\n  return { props: { data } };\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"3. ISR (Incremental Static Regeneration)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"설명: SSG와 유사하지만, 일정 시간마다 정적 페이지를 백그라운드에서 갱신\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"장점:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"정적 페이지 성능 + 최신 데이터 반영 가능\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"단점:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"업데이트 타이밍 제어가 필요\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"사용 예시:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"export async function getStaticProps() {\\n  const res = await fetch('https://api.example.com/data');\\n  const data = await res.json();\\n  return {\\n    props: { data },\\n    revalidate: 60, // 60초마다 페이지 갱신\\n  };\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h2, {\n      children: \"4. CSR (Client-Side Rendering)\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"설명: 클라이언트에서 데이터를 받아와 렌더링\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"장점:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"초기 로딩은 가볍고 빠름\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"단점:\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"SEO 불리\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"초기 데이터 로딩 시 깜빡임(Flickering) 가능\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"사용 예시:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useEffect, useState } from 'react';\\n\\nexport default function Page() {\\n  const [data, setData] = useState(null);\\n\\n  useEffect(() => {\\n    fetch('/api/data')\\n      .then((res) => res.json())\\n      .then(setData);\\n  }, []);\\n\\n  return <div>{data ? data.title : 'Loading...'}</div>;\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"meta":{"title":"Next.js 렌더링","subTitle":"Next.js 렌더링 방식 정리","author":"이형준","category":"Next.js","thumbnail":"/image/img_Nextjs.png","tags":"#Next.js, #렌더링, #정리"}},"__N_SSG":true}